/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <fsl_device_registers.h>
#include <board.h>

/**
 * CPU clock frequency
 */
#define CPU_CLOCK_FREQ_MHZ	48

/**
 * Indices in ledPins[]
*/
enum leds {
	GREEN_LED = 0,
	RED_LED,
	BLUE_LED
};

/**
 * Poor man's version of delay in ms, using a simple loop
 * that decrements a counter.
 * Each iteration is 3 instructions: cmp, dec and branch.
 * So assuming, 3 CPU clock cycles per iteration and a clock
 * speed of 48MHz, we can execution 16 iterations in 1 us.
 * So, in 16000 iterations in 1ms
 */
static void delay(uint32_t ms)
{
	uint32_t iterations_per_ms = (CPU_CLOCK_FREQ_MHZ / 3) * 1000;
	register uint32_t n = ms * iterations_per_ms;

	/*
	 * TODO: check for overflow
	 */

	while (n != 0) {
		n--;
	}
}


int main(void)
{
    hardware_init();
    GPIO_DRV_OutputPinInit(&ledPins[BLUE_LED]);

    for ( ; ; ) {
    	GPIO_DRV_TogglePinOutput(ledPins[BLUE_LED].pinName);
    	delay(500);
    }

    /* Never leave main */
    return 0;
}
